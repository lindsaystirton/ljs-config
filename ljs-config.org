#+TITLE: LJS Emacs Config
#+SEQ_TODO: PROPOSED TODO STARTED | DONE DEFERRED REJECTED
#+OPTIONS: H:2 num:nil toc:t
#+STARTUP: oddeven

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

You are looking at the personal emacs configuration files of Lindsay
Stirton. Draws heavily (to the point of shameless plagiarism) on the
[[https://kieranhealy.org/resources/emacs-starter-kit/][Emacs Starter Kit for the Social Sciences]] (ESKSS), previously maintained by
[[http://kieranhealy.org][Kieran Healy]]. Quite apart from being a computer whizz, Healy is an
absolutely first rate social scientist. On the latter at least, I
speak with some authority, and a little envy. Read his work!

My aim is to provide a more minimal version than Healy's, while
incorporating some of my personal preferences, and in doing so learn a
bit about Emacs-Lisp programming. One important change since ESKSS was
actively developed has been the development of [[jwiegley.github.io/use-package][use-package]], which
greatly simplifies package-management. LJS Emacs Config makes maximal
use of use-package.

Source code for the latest version is at
http://lindsaystirton.github.com/ljs-config/.



** Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:

*** Before you Begin
If you have used Emacs before and already have a =.emacs= file or =.emacs.d= directory, back them up and then delete them. See below for details on how to add customizations to the kit.

*** Getting Lindsay's Emacs
You have two choices. 

/Option A/. Download [add link] a =.zip= file of ljs-config. 

/Option B/. If you want to keep up with changes to the configurations,
you should clone the source code using git rather than simply copying
a static version of it. In general I think you should be using version
control on your plain-text documents anyway, so I recommend this
option. The most straightforward way to get the tools you need is to
*install Xcode*. Xcode is what software developers use to write Mac
and iOS applications. As such it comes with a bunch of things we are
not so interested in, but it makes it easy to install the tools we do
need. It's available for free [[https://developer.apple.com/xcode/][via the Mac App Store]]. Once downloaded,
launch Xcode, go to Xcode &#62; Preferences &#62; Downloads and
install the *Command Line Tools for Xcode*. At that point you can quit
Xcode and never use it again. Alternatively, go to [[https://developer.apple.com][Apple's Developer
Site]], login with your Apple ID and download the Command Line Tools
for Xcode package by itself, without the Xcode application.

*** Prerequisites

*0.1 Get Emacs*.  [[http://emacsformacosx.com][Download Emacs here]].

*0.2 Install a Modern TeX Distribution*. If you are using OS X,
[[http://tug.org/mactex/][download MacTeX]] and install it.

*0.3 Install R and Pandoc*. These are not strictly required for the
installation to work, and you can skip this step if you like. But you
will probably be using them anyway, if you're not already. If you're
doing statistical work you will probably want to use R or Stata. R is
free and you can [[http://www.r-project.org][download it here]]. Pandoc is a very useful utility
that lets you convert easily between many different forms of
plain-text markup (such as Markdown, HTML, LaTeX, and
others). [[johnmacfarlanet/pandoc/][Get Pandoc here]].

*0.4 Note your user name* or the name of your computer. If you don't
know either, open the Terminal application and do

#+begin_src sh
 whoami
#+end_src

for your user name and

#+begin_src sh
 hostname
#+end_src

for the system name. You will need to know your login name to activate the final customization file properly. You can use the system name as well (or instead).

*** Setup

*1.* If you downloaded a =.zip= file of the kit, you must uncompress it, move the resulting folder to the top level of your home director and rename it =.emacs.d=. Assuming the downloaded zip file is in your =~/Downloads= folder, open a Terminal window and do this:

#+begin_src sh
 cd ~/Downloads
 unzip ljs-config-master.zip
 mv ljs-config-master ~/.emacs.d
#+end_src

Alternatively, if you are using git (the preferred method), then clone the starter kit from github. Open a Terminal window and do this:


#+begin_src sh
 git clone git://github.com/lindsaystirton/ljs-config ~/.emacs.d
#+end_src

*2.* Inside the file =ljs.org=, change the paths to any BibTeX databases as described at the top of that file.


*3.* Rename the starter kit's =ljs.org= file to that of
=%your-username%.org= or =%your-systemname%.org=, based on the
information you noted in 0.4 above. This is where you can add in any
of your own further customizations to Emacs.


*4.* Launch Emacs.

When you first start Emacs after installing Lindsay's Emacs, it will
try to contact several package repositories, so make sure you have an
internet connection. The kit will download packages mainly from the
official [[http://http://elpa.gnu.org][GNU ELPA Repository]] and the [[MELPA Repo]]. Each package will be
fetched, compiled by Emacs, and stored in the =~/.emacs.d=
directory. In practice I've found that this process is prone to
hiccups as packages are fetched from the servers, so please be patient
with it. If it doesn't get everything first time around, quit and
relaunch Emacs, and it will try again. If the problem
persists---especially if you get a message saying "The package
'auctex' is not available for installation"---you can manually install
packages as follows. Open Emacs, do =M-x list-packages= and in the
resulting buffer search or scroll down the list to, e.g., auctex, mark
it for installation by pressing =i= and then install it (or them) by
hitting =x=. With the packages in place, restart Emacs and the starter
kit will finish setting itself up. Unfortunately, I can't control
these intermittent installation errors. They seem to have something to
do with the way Emacs talks to the GNU ELPA package server.

*5.* (Optional.) Once Emacs is up and running, do =M-x
ljs-config-compile= to byte-compile all the emacs-lisp (.el)
files that form part of my emacs configuration, for slightly faster
loading.

** Structure
   :PROPERTIES:
   :CUSTOM_ID: structure
   :END:

The init.el file is where everything begins. It's the first file to
get loaded. Additional customization embedded in this file provides
what I consider to be better defaults, both for different programming
languages and for built-in Emacs features like bindings or registers.

These configurations were written (or more accurately adapted) for
Emacs 29.1, and makes use of Emacs' package system to install a number
of additional packages. These are stored in =~/.emacs.d/elpa=. Some
useful packages are not available through the package manager
yet. These are stored in =~/.emacs.d/src/=.

There are also a few files that are meant for code that doesn't belong
in ljs-config, they are described below in [[* Customization][Customization]]

** Customization
   :PROPERTIES:
   :CUSTOM_ID: customization
   :END:

The many defaults built into these configuration files are only the
beginning of most users customization of Emacs to suite their needs.
The starter kit provides a number of places for additional user and
system specific customization.  These are designed in such a way that
it will be easy for you to continue tracking your own personal
customization inside ljs-config while retaining your ability to
pull down general ljs-config updates without conflict.

- Make your own branch :: The first step to user-specific
     customization is (like in any git project) to make a branch for
     your local changes using =git branch=.  Save the master branch
     for pulling down new versions of the starter kit, and save all of
     your personal information in a personal branch.  That way you
     never have to worry about accidentally =git push='ing up a patch
     with all of your gnus email passwords.

- User specific config :: Your personal configuration information can
     be stored in a user-specific-config file.  This is the file named
     after your user with the extensions =.el= or =.org= [2].  If
     you're unsure of your user name evaluate the following code block
     to find out.
     #+begin_src sh
       echo $USER
     #+end_src
       
     If your configuration starts to feel cramped in a single file
     (although with the nested headlines of an Org-mode file, that
     could take a while) and you want to stretch your config's legs,
     you can also create a directory named after your system user
     name.  If a such a directory exists, it will be added to the
     load-path, and any elisp or org-mode w/embedded elisp files in it
     will be loaded.

- System specific config :: Finally, you may want to configure
     different settings for different machines. Ljs-config will
     look for a file named after the current hostname ending in =.el=
     or =.org= which will allow host-specific configuration.  If
     you're unsure of your hostname the following can be executed to
     find out.
     #+begin_src sh
       hostname
     #+end_src

- Installing more elisp libraries :: While my includes
     many useful Emacs lisp libraries, you are bound to find more that
     you will want to install.  The easiest way to install new
     libraries is through the Emacs Lisp Package Archive (see [[* elpa][ELPA]]).
     When a library is not available through ELPA you can grab its
     source and place it directly in the =src= directory.  Any
     packages found there will automatically be added to your
     load-path when Emacs starts up.
     
Some additional miscellaneous configuration and getting started
suggestions
- First off see the [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Customization.html#Customization][Customization]] node in the Emacs manual.  Available
  online or through the =info= command (run with =C-h i=).
- =grep=-ing through the =ljs-config-*= files in this directory can
  provide useful examples for how to do things like install major
  modes, define keybindings, etc..
- read the following [[http://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html][Key-Binding-Conventions]] before defining too many
  personal key bindings
- The starter-kit comes pre-bundled with a variety of color themes.
  See [[file:starter-kit-misc.org::*Color%20Themes][Color Themes]] for instructions on how to change the colors used
  by Emacs.
  
** Emacs Lisp Package Archive
   :PROPERTIES:
   :CUSTOM_ID: elpa
   :END:

Libraries from [[http://elpa.gnu.org/packages/][ELPA]] or the [[http://melpa.milkbox.net/][MELPA]] repo are preferred when available since dependencies
are handled automatically, and the burden to update them is removed
from the user. 

Sometimes packages are removed from the Starter Kit as they get added
to ELPA itself. This has occasionally caused problems with certain
packages. If you run into problems with such a package, try removing
everything from inside the elpa/ directory and invoking =M-x -elpa-install= in a fresh instance.

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:
This section contains all code implementing Lindsay's emacs configuration.

** ljs-config basics

*** Ubiquitous Packages

These should be loaded on startup rather than autoloaded on demand
since they are likely to be used in every session

#+srcname: ljs-config-load-on-startup
#+begin_src emacs-lisp 

  ;;; Ubiquitous Packages
    (require 'use-package)

    (use-package cl-lib
      :ensure t)

    (use-package ffap
      :ensure t)

    (use-package uniquify
      :ensure nil
      :demand t
      :config
      (setq uniquify-buffer-name-style 'forward))

    (use-package ansi-color
      :ensure t)

    (use-package recentf
      :ensure t
      :config
      (recentf-mode 1))

    (use-package saveplace
      :ensure t
      :config
      (save-place-mode 1))
#+end_src

*** Function for loading/compiling ljs-config-*
#+srcname: ljs-config-load
#+begin_src emacs-lisp 
  (defun ljs-config-load (file)
    "This function is to be used to load ljs-config-*.org files."
    (org-babel-load-file (expand-file-name file
                                           dotfiles-dir)))
#+end_src

#+source: ljs-config-compile
#+begin_src emacs-lisp
  (defun ljs-config-compile (&optional arg)
    "Tangle and Byte compile all ljs-config files."
    (interactive "P")
    (cl-flet ((age (file)
                (float-time
                 (time-subtract (current-time)
                                (nth 5 (or (file-attributes (file-truename file))
                                           (file-attributes file)))))))
      (mapc
       (lambda (file)
         (when (string= "org" (file-name-extension file))
           (let ((el-file (concat (file-name-sans-extension file) ".el")))
             (when (or arg
                       (not (and (file-exists-p el-file)
                                 (> (age file) (age el-file)))))
               (org-babel-tangle-file file el-file "emacs-lisp")
               (byte-compile-file el-file)))))
       (apply #'append
              (mapcar
               (lambda (d)
                 (when (and (file-exists-p d) (file-directory-p d))
                   (mapcar (lambda (f) (expand-file-name f d)) (directory-files d))))
               (list (concat dotfiles-dir user-login-name) dotfiles-dir))))))
#+end_src






*** LJS Emacs Config  aspell (Spell checking with flyspell)
aspell workaround in [[file:ljs-config-aspell.org][ljs-config-aspell]]
#+begin_src emacs-lisp
  (ljs-config-load "./ljs-config/ljs-config-aspell.org")
#+end_src




*** ELPA (Emacs Lisp Package Manager)

[[http://elpa.gnu.org/][Emacs List Package Archive]] (ELPA).

#+srcname: ljs-config-package
#+begin_src emacs-lisp 

 (require 'package)
  (setq package-archives
            '(
          ("gnu"         . "http://elpa.gnu.org/packages/")
          ("melpa"   . "https://melpa.org/packages/")))


;;; Add support to package.el for pre-filtering available packages
(defvar package-filter-function nil
  "Optional predicate function used to internally filter packages used by package.el.

The function is called with the arguments PACKAGE VERSION ARCHIVE, where
PACKAGE is a symbol, VERSION is a vector as produced by `version-to-list', and
ARCHIVE is the string name of the package archive.")


(defadvice package--add-to-archive-contents

  (around filter-packages (package archive) activate)

  "Add filtering of available packages using `package-filter-function', if non-nil."

  (when (or (null package-filter-function)

(funcall package-filter-function
         (car package)
         (funcall (if (fboundp 'package-desc-version)
                      'package--ac-desc-version
                    'package-desc-vers)
                  (cdr package))
         archive))
    ad-do-it))

(defvar melpa-exclude-packages
      '()
  "Don't install Melpa versions of these packages.")

;; Don't take Melpa versions of certain packages
(setq package-filter-function
      (lambda (package version archive)
        (and
         (not (memq package '(eieio)))
         (or (not (string-equal archive "melpa"))
             (not (memq package melpa-exclude-packages))))))

  (package-initialize)
  (ljs-config-load "./ljs-config/ljs-config-elpa.org")
 #+end_src

 #+results: ljs-config-elpa
: loaded ljs-config-elpa.el
#+end_src




*** Work around OS X bug

Work around a bug on OS X where system-name is FQDN (Fully Qualified
Domain Name)
#+srcname: ljs-config-osX-workaround
#+begin_src emacs-lisp 
  (if (eq system-type 'darwin)
      (setq system-name (car (split-string system-name "\\."))))
#+end_src

*** System/User specific customizations

You can keep system- or user-specific customizations here in either
raw emacs-lisp files or as embedded elisp in org-mode files (as done
in this document).

#+srcname: ljs-config/system-setup
#+begin_src emacs-lisp 
  (setq system-specific-config (concat dotfiles-dir system-name ".el")
        system-specific-literate-config (concat dotfiles-dir system-name ".org")
        user-specific-config (concat dotfiles-dir user-login-name ".el")
        user-specific-literate-config (concat dotfiles-dir user-login-name ".org")
        user-specific-dir (concat dotfiles-dir user-login-name))
  (add-to-list 'load-path user-specific-dir)
#+end_src
`
You can keep elisp source in the =src= directory.  Packages loaded
from here will override those installed by ELPA.  This is useful if
you want to track the development versions of a project, or if a
project is not in elpa.

#+srcname: ljs-config-load-elisp-dir
#+begin_src emacs-lisp
(setq elisp-source-dir (concat dotfiles-dir "src"))
(add-to-list 'load-path elisp-source-dir)
#+end_src

** Load the rest of ljs-config core
The following files contain the remainder of the core of the core
ljs-config.  All of the code in this section should be loaded.

*** LJS Config Defuns
LJS Config function definitions in [[file:ljs-config-defuns][ljs-comfig-defuns]].
#+srcname: ljs-config-load-defuns
#+begin_src emacs-lisp
(ljs-config-load "./ljs-config/ljs-config-defuns.org")
#+end_src

*** LJS Config Appearance
[[file:ljs-config-appearance.org][ljs-config-appearance]].
#+srcname: ljs-config-load-appearance
#+begin_src emacs-lisp
  (ljs-config-load "./ljs-config/ljs-config-appearance.org")
#+end_src

*** LJS Config LaTeX
Located in [[file:ljs-config-latex.org][ljs-config-latex]]

#+srcname: ljs-config-load-latex
#+begin_src emacs-lisp
  (ljs-config-load "./ljs-config/ljs-config-latex.org")
#+end_src

*** Starter Kit Stats
Located in [[file:ljs-config-stats.org][ljs-config-stats]]

#+begin_src emacs-lisp
  (ljs-config-load "./ljs-config/ljs-config-stats.org")
#+end_src

*** LJS Config Git
Located in [[file:ljs-config-git.org][ljs-config-git]]
#+srcname: ljs-config-load-appearance
#+begin_src emacs-lisp
  (ljs-config-load "./ljs-config/ljs-config-git.org")
#+end_src

#+source: message-line
#+begin_src emacs-lisp
  (message "ljs-config main file loaded.")
#+end_src
