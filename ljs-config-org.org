#+TITLE: LJS Config LaTeX
#+OPTIONS: toc:nil H:2 num:nil ^:nil

This is part of the [[file:ljs-config.org][LJS-Config]]. This file was (even more than the
others) pretty much copied from Kieran Healy's
[[https://github.com/kjhealy/emacs-starter-kit][emacs starter-kit for
the social sciences]]. I have made some effort to implement use-package.

* Starter Kit LaTeX
  Support for editing LaTeX.

** Load Support Packages

*** Prettify Math in Buffers

#+begin_src emacs-lisp
(use-package latex-pretty-symbols
  :ensure t)
#+end_src

*** Load RefTeX

#+begin_src emacs-lisp
(use-package reftex
  :ensure t
  :commands (reftex-mode turn-on-reftex reftex-citation reftex-index-phrase-mode)
  :hook ((LaTeX-mode . turn-on-reftex)
         (pandoc-mode . turn-on-reftex)
         (org-mode . org-mode-reftex-setup))
  :config
  (setq reftex-enable-partial-scans t
        reftex-save-parse-info t
        reftex-use-multiple-selection-buffers t
        reftex-plug-into-AUCTeX t)
  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (when (and (buffer-file-name)
               (file-exists-p (buffer-file-name)))
      (reftex-parse-all))
    (define-key org-mode-map (kbd "C-c (") 'reftex-citation))
  (setq reftex-cite-format
        '((?\C-m . "\\cite[]{%l}")
          (?t . "\\textcite{%l}")
          (?a . "\\autocite[]{%l}")
          (?p . "\\parencite[]{%l}")
          (?f . "\\footcite[][]{%l}")
          (?F . "\\fullcite[]{%l}")
          (?P . "[@%l]")
          (?T . "@%l [p. ]")
          (?x . "[]{%l}")
          (?X . "{%l}")))
  (setq font-latex-match-reference-keywords
        '(("cite" "[{")
          ("cites" "[{}]")
          ("footcite" "[{")
          ("footcites" "[{")
          ("parencite" "[{")
          ("textcite" "[{")
          ("fullcite" "[{")
          ("citetitle" "[{")
          ("citetitles" "[{")
          ("headlessfullcite" "[{")))
  (setq reftex-cite-prompt-optional-args nil
        reftex-cite-cleanup-optional-args t))
#+end_src

*** Load ebib

#+begin_src emacs-lisp
(use-package ebib
  :ensure t
  :commands (ebib)
  :init
  (setq ebib-preload-bib-files '("/Users/ljs46/Documents/bibs/masterbib.bib"))
  :hook (LaTeX-mode . (lambda ()
                        (local-set-key "\C-cb" 'ebib-insert-bibtex-key))))
#+end_src

* Configure AucTeX

** Automatic Parsing

#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :config
  (setq TeX-parse-self t
        TeX-auto-save t)
  (add-hook 'LaTeX-mode-hook 'my-auctex-mode-setup))

(defun my-auctex-mode-setup ()
  (variable-pitch-mode 1)
  (visual-line-mode 1))
#+end_src

** Use pdfLaTeX

#+begin_src emacs-lisp
(use-package tex
  :hook (LaTeX-mode . TeX-PDF-mode))
#+end_src

** Configure Biber

#+begin_src emacs-lisp
(use-package tex
  :config
  (defun TeX-run-Biber (name command file)
    (let ((process (TeX-run-command name command file)))
      (setq TeX-sentinel-function 'TeX-Biber-sentinel)
      (if TeX-process-asynchronous
          process
        (TeX-synchronous-sentinel name file process))))

  (defun TeX-Biber-sentinel (process name)
    (goto-char (point-max))
    (cond
     ((re-search-backward "^(There \\(?:was\\|were\\) \\([0-9]+\\) \\(warnings?\\|error messages?\\))" nil t)
      (message (concat "Biber finished with %s %s. Type `%s' to display output.")
               (match-string 1) (match-string 2)
               (substitute-command-keys "\\\\[TeX-recenter-output-buffer]")))
     (t
      (message "Biber finished successfully. Run LaTeX again to get citations right."))))

  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber"))))
#+end_src

** Use latexmk for Compilation by Default

#+begin_src emacs-lisp
(use-package tex
  :config
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk")))
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk")))
  (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "latexmk"))))
#+end_src

** Use pdf-tools with AUCTeX

#+begin_src emacs-lisp
(use-package tex
  :config
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))))
#+end_src

* Smart Display of PDF on C-c C-a

#+begin_src emacs-lisp
(defun ljs/frame-double-width (&optional frame)
  "Double the width of FRAME (or selected frame)."
  (let ((frame (or frame (selected-frame))))
    (set-frame-width frame (* 2 (frame-width frame))))
  (balance-windows))

(defun ljs/TeX-command-run-all-with-smart-display ()
  "Compile the LaTeX document and display the PDF smartly."
  (interactive)
  (TeX-command-run-all)
  (run-at-time "0.5 sec" nil
               (lambda ()
                 (let ((pdf-buffer (get-buffer (concat (file-name-sans-extension (buffer-name)) ".pdf"))))
                   (when (and pdf-buffer (buffer-live-p pdf-buffer))
                     (display-buffer
                      pdf-buffer
                      '((display-buffer-reuse-window . t)
                        (side . right)
                        (window-width . 0.5)))
                     (ljs/frame-double-width))))))

(with-eval-after-load 'tex
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-a") #'ljs/TeX-command-run-all-with-smart-display))))
#+end_src

* Message

#+begin_src emacs-lisp
(message "LJS Config LaTeX loaded.")
#+end_src
