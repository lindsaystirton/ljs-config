#+TITLE: LJS Config Org
#+OPTIONS: toc:nil num:nil ^:nil

This file is part of the [[file:ljs-config.org][Lindsay Stirton's Emacs Configurations]]. Code
for Org is all but copy-pasted from Kieran Healy's [[https://github.com/kjhealy/emacs-starter-kit/][Emacs Starter-Kit
for the Social Sciences]]. I have added support for Pdf-Tools and a
configuration for Org-Roam.

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also implemented using Org-mode and [[http://git-scm.com/][git]].

** Org-Mode

#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t)
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (defun org-mode-setup ()
    (org-indent-mode 1)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)))
#+end_src

** Org-Mode Hooks
Make yasnippet work properly with org-mode.

#+begin_src emacs-lisp
(defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (and (fboundp 'yas-expand) (yas-expand))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'org-tab-first-hook
                         'yas-org-very-safe-expand)))
#+end_src

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key "\M-\C-n" 'outline-next-visible-heading)
            (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
            (local-set-key "\M-\C-u" 'outline-up-heading)
            ;; table
            (local-set-key "\M-\C-w" 'org-table-copy-region)
            (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
            (local-set-key "\M-\C-l" 'org-table-sort-lines)
            ;; display images
            (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+end_src

** Speed keys
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

** Code blocks
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-src-lang-modes
             '("r" . ess-mode))
(add-to-list 'org-src-lang-modes
             '("stan" . stan-mode))
#+end_src

** Code block fontification
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
#+end_src

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

** Ensure the Latest Org-mode manual is in the info directory
#+begin_src emacs-lisp
(unless (boundp 'Info-directory-list)
  (setq Info-directory-list Info-default-directory-list))
(setq Info-directory-list
      (cons (expand-file-name
             "doc"
             (expand-file-name "org"
                               (expand-file-name "src" dotfiles-dir)))
            Info-directory-list))
#+end_src

** Nice Bulleted Lists
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :init
  (add-hook 'org-mode-hook (lambda ()
                             (org-bullets-mode 1)))
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/Dropbox/Org-roam/Notes/")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("a" "archive" plain (file "~/Dropbox/Org-roam/Templates/ArchiveTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("s" "source" plain (file "~/Dropbox/Org-roam/Templates/SourceTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)))
  (org-roam-auto-synchronize t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point))
  :config
  (setq org-link-file-path-type 'adaptive)
  (setq org-roam-db-location "~/Dropbox/Org-roam/org-roam.db"))
#+end_src

** PDF-Tools Setup for Org and Org-Roam
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  (message "pdf-tools loaded"))

(use-package org-pdftools
  :ensure t
  :hook (org-mode . org-pdftools-setup-link)
  :after (org pdf-tools)
  :config
  (setq org-file-apps
        '(("\\.pdf\\'" . emacsclient)))
  (message "org-pdftools loaded"))

(use-package org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq orb-preformat-keywords
        '("citekey" "title" "url" "author-or-editor" "keywords"))
  (message "org-roam-bibtex loaded"))
#+end_src

** Open PDFs in a frame on the right using pdf-tools
#+begin_src emacs-lisp
(defun ljs/display-pdf-to-right (buffer alist)
  "Display PDF files to the right in org-mode."
  (when (eq major-mode 'org-mode)
    (let* ((window (display-buffer-in-side-window buffer '((side . right) (slot . 0)))))
      (ljs/frame-double-width (window-frame window))
      (window--display-buffer buffer window 'window alist)
      (when (eq (length (window-list)) 1)
        (split-window-horizontally))
      window)))

(add-to-list 'display-buffer-alist '("\\.pdf\\'" . (ljs/display-pdf-to-right)))
#+end_src

** Confirmation Message
#+begin_src emacs-lisp
(message "LJS Config Org loaded.")
#+end_src
