#+TITLE: LJS Config Statistics
#+OPTIONS: toc:nil num:nil ^:nil

Part of [[file:ljs-config.org][LJS-Config]]. ESS settings borrowed heavily from Kieran Healy's [[https://github.com/kjhealy/emacs-starter-kit][emacs starter-kit for
the social sciences]]. I have used use-package to load and configure packages where possible. I have added stan-mode configuration because #Bayes. 

This file provides settings for ESS and R. 

* R and ESS

** Load ESS

#+begin_src emacs-lisp :tangle yes
  (use-package ess
    :config
    (add-hook 'ess-R-post-run-hook 'smartparens-mode)
    (add-hook 'ess-mode-hook 'run-ljs-config-coding-hook)
    (add-hook 'ess-mode-hook 'turn-on-auto-fill)
    (add-hook 'inferior-ess-mode-hook 'turn-on-auto-fill)
    (add-hook 'inferior-ess-mode-hook
              (lambda ()
                (local-set-key (kbd "M-<up>") 'comint-previous-input)
                (local-set-key (kbd "M-<down>") 'comint-next-input)
                (setq inferior-ess-site "https://www.stats.bris.ac.uk/R/")))
    )
#+end_src

** Use Polymode

#+begin_src emacs-lisp :tangle yes
(use-package poly-R :ensure t)
(use-package poly-markdown :ensure t)
(use-package polymode :ensure t)
#+end_src

** Make shift-enter do a lot in ESS

#+begin_src emacs-lisp :tangle yes
(defun my-ess-start-R ()
  "Start R and split the window horizontally, doubling the frame width."
  (interactive)
  (or (assq 'inferior-ess-mode
            (mapcar (lambda (buff) (list (buffer-local-value 'major-mode buff)))
                    (buffer-list)))
      (progn
        (delete-other-windows)
        (setq w1 (selected-window))
        (setq w1name (buffer-name))
        (setq w2 (split-window w1 nil t))
        (R)
        (set-window-buffer w2 "*R*")
        (set-window-buffer w1 w1name)
        (setq ljs/original-frame-width (frame-pixel-width))
        (ljs/frame-double-width))))

(defun my-ess-eval ()
  (interactive)
  (my-ess-start-R)
  (if (and transient-mark-mode mark-active)
      (call-interactively 'ess-eval-region)
    (call-interactively 'ess-eval-line-and-step)))

(add-hook 'ess-mode-hook
          (lambda () (local-set-key [(shift return)] 'my-ess-eval)))
(add-hook 'inferior-ess-mode-hook
          (lambda ()
            (local-set-key [C-up] 'comint-previous-input)
            (local-set-key [C-down] 'comint-next-input)))
(require 'ess-site)
#+end_src

** Restore Original Frame Dimensions on quitting R

#+begin_src emacs-lisp :tangle yes
(defun my-restore-original-dimensions ()
  (interactive)
  (if (string-match-p "\\*R\\*" (buffer-name (current-buffer)))
      (my-ess-start-R)
    (progn
      (delete-other-windows)
      (when ljs/original-frame-width
        (set-frame-width (selected-frame) ljs/original-frame-width nil t)))))

#+end_src

** Add a Keyboard Shortcut for the Pipe Operator

#+begin_src emacs-lisp :tangle yes
(defun my_pipe_operator ()
  "R/ESS %>% operator"
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))

(define-key ess-mode-map (kbd "M-_") 'my_pipe_operator)
(define-key inferior-ess-mode-map (kbd "M-_") 'my_pipe_operator)
#+end_src

** Add a Keyboard Shortcut for Rmd chunks

#+begin_src emacs-lisp :tangle yes
(defun ljs-insert-r-chunk (header)
  "Insert an r-chunk in markdown mode."
  (interactive "sLabel: ")
  (insert (concat "```{r " header "}\n\n```"))
  (forward-line -1))

(global-set-key (kbd "C-c i") 'ljs-insert-r-chunk)
#+end_src

** Uniquify Buffer Names

#+begin_src emacs-lisp :tangle yes
(use-package uniquify
  :ensure nil
  :init
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets))

#+end_src

** lintr and flycheck

#+begin_src emacs-lisp :tangle yes
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'ess-mode-hook (lambda () (flycheck-mode t)))
#+end_src

** Rainbow delimiters in R

#+begin_src emacs-lisp :tangle yes
(add-hook 'ess-mode-hook #'rainbow-delimiters-mode)
#+end_src

* Stan Mode Configurations

** Install and Configure Stan Mode
#+begin_src emacs-lisp :tangle yes
(use-package stan-mode
  :config
  (setq stan-executable "/opt/homebrew/bin/stanc")
  (setq stan-indentation-offset 2)
  :mode ("\\.stan\\'" . stan-mode)
  :hook (stan-mode . stan-mode-setup))
#+end_src

** Install and Configure Company-Stan
#+begin_src emacs-lisp :tangle yes
(use-package company-stan
  :ensure t
  :after stan-mode
  :config
  (add-to-list 'company-backends 'company-stan))
#+end_src

** Install and Configure stan-snippets
#+begin_src emacs-lisp :tangle yes
(use-package stan-snippets
  :ensure t)
#+end_src

** Install and Configure Flycheck for Stan
#+begin_src emacs-lisp :tangle yes
(use-package flycheck-stan
  :hook ((stan-mode . flycheck-stan-stanc2-setup)
         (stan-mode . flycheck-stan-stanc3-setup))
  :config
  (setq flycheck-stanc-executable "/opt/homebrew/bin/stanc")
  (setq flycheck-stanc3-executable "/opt/homebrew/bin/stanc3"))
#+end_src

** Configure Imenu for Stan
#+begin_src emacs-lisp :tangle yes
(add-hook 'stan-mode-hook
          (lambda ()
            (setq-local imenu-generic-expression '((nil "^\\s-*\\(\\w+\\)\\s-*=" 1)))))
#+end_src

** Configure Key Bindings for Stan Commands
#+begin_src emacs-lisp :tangle yes
(add-hook 'stan-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c C-c") 'stan-compile)))
#+end_src

** Rainbow delimiters in Stan-mode
#+begin_src emacs-lisp :tangle yes
(add-hook 'stan-mode-hook #'rainbow-delimiters-mode)
#+end_src

* Message
#+begin_src emacs-lisp :tangle yes
(message "LJS Config Stats loaded.")
#+end_src
