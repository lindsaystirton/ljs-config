#+TITLE: LJS Config Statistics
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:ljs-config.org][LJS-Config]]. ESS settings borrowed heavily from Kieran Healy's [[https://github.com/kjhealy/emacs-starter-kit][emacs starter-kit for
the social sciences]]. I have made some effort to implement use-package. I have added stan-mode configuration, and some settings for csv-mode. I see Healy has the latter in starter-kit-text.org. I will maybe put these in an equivalent file eventually. 


This file provides settings for ESS and R. 

* R and ESS
   Load ESS: Emacs Speaks Statistics, and several further tweaks for
 R.

 ** Load ESS 

 Smart parens, and uses Meta-up to go to previous command. 

#+source: load-ess
#+begin_src emacs-lisp
(use-package ess
  :config
  (add-hook 'ess-R-post-run-hook 'smartparens-mode)
  (add-hook 'ess-mode-hook 'run-ljs-config-coding-hook)
  (add-hook 'ess-mode-hook 'turn-on-auto-fill)
  (add-hook 'inferior-ess-mode-hook 'turn-on-auto-fill)
  (add-hook 'inferior-ess-mode-hook
            (lambda ()
              (local-set-key (kbd "M-<up>") 'comint-previous-input)
              (local-set-key (kbd "M-<down>") 'comint-next-input)
              (setq inferior-ess-site "https://www.stats.bris.ac.uk/R/"))))
#+end_src




** Use Polymode 
Polymode is a package that supports multiple modes inside a single buffer. It is aimed particularly at literate programming approaches and supports, e.g., R and markdown in a single =.Rmd= file. So it is very useful with knitr in R.

#+source: Polymode
#+begin_src emacs-lisp 
(use-package poly-R
  :ensure t)

(use-package poly-markdown
  :ensure t)

(use-package polymode
  :ensure t)
#+end_src



** Make shift-enter to a lot in ESS.
 Use shift-enter to split window & launch R (if not running), execute
 highlighted region (if R running & area highlighted), or execute
 current line (and move to next line, skipping comments). Nice. See
 http://www.emacswiki.org/emacs/EmacsSpeaksStatistics,
 FelipeCsaszar. Adapted to split vertically instead of horizontally. 
#+src-name: ess-shift-enter
#+begin_src emacs-lisp
(setq ess-ask-for-ess-directory nil)
  (setq ess-local-process-name "R")
  (setq ansi-color-for-comint-mode 'filter)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  (defun my-ess-start-R ()
    (interactive)
    (unless (mapcar (lambda (s) (string-match "*R" (buffer-name s))) (buffer-list))
;;    (unless (string-match "*R" (mapcar (function buffer-name) (buffer-list)))
      (progn
	(delete-other-windows)
	(setq w1 (selected-window))
	(setq w1name (buffer-name))
	(setq w2 (split-window w1 nil t))
	(R)
	(set-window-buffer w2 "*R*")
	(set-window-buffer w1 w1name))))
  (defun my-ess-eval ()
    (interactive)
    (my-ess-start-R)
    (if (and transient-mark-mode mark-active)
	(call-interactively 'ess-eval-region)
      (call-interactively 'ess-eval-line-and-step)))
  (add-hook 'ess-mode-hook
	    '(lambda()
	       (local-set-key [(shift return)] 'my-ess-eval)))
  (add-hook 'inferior-ess-mode-hook
	    '(lambda()
	       (local-set-key [C-up] 'comint-previous-input)
	       (local-set-key [C-down] 'comint-next-input)))
 (add-hook 'Rnw-mode-hook 
          '(lambda() 
             (local-set-key [(shift return)] 'my-ess-eval))) 
  (require 'ess-site)
#+end_src

** Add a Keyboard Shortcut for the Pipe Operator

Assignment in ESS is shift-minus; by extension we'll use M-shift-minus for inserting the `%>%` operator.

#+src-name: ess-pipe-shortcut
#+begin_src emacs-lisp

(defun my_pipe_operator ()
  "R/ESS %>% operator"
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))
(define-key ess-mode-map (kbd "M-_") 'my_pipe_operator)
(define-key inferior-ess-mode-map (kbd "M-_") 'my_pipe_operator)

#+end_src

** Add a Keyboard Shortcut for Rmd chunks

#+src-name: rmd-chunk-insert
#+BEGIN_SRC emacs-lisp

;;;Insert new chunk for Rmarkdown
(defun ljs-insert-r-chunk (header) 
  "Insert an r-chunk in markdown mode." 
  (interactive "sLabel: ") 
  (insert (concat "```{r " header "}\n\n```")) 
  (forward-line -1))

(global-set-key (kbd "C-c i") 'ljs-insert-r-chunk)

#+END_SRC



** Uniquify Buffer Names
This is useful for when you have buffers with many similar names, as when there are various open files from different folders named =analysis.R= or similar. 

#+source: uniquify
#+begin_src emacs-lisp
  (use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src

** lintr and flycheck
[[https://github.com/jimhester/lintr][lintr]] checks your R code for style and syntax errors. It's an R library that integrates with [[http://www.flycheck.org][flycheck]]. You must install lintr from R. Flycheck can also check code in many other languages. You will need to install linters for them separately as well. See the flycheck documentation for details.

#+source: lintr
#+begin_src emacs-lisp 
  (add-hook 'after-init-hook #'global-flycheck-mode)
    (add-hook 'ess-mode-hook
              (lambda () (flycheck-mode t)))
#+end_src

** Rainbow delimiters in R
#+begin_src emacs-lisp
(add-hook 'ess-mode-hook #'rainbow-delimiters-mode)
#+end_src



* Stan Mode Configurations

** Install and Configure Stan Mode
#+srcname: ljs-config-stan-mode
#+begin_src emacs-lisp
(use-package stan-mode
  :config
  (setq stan-executable "/opt/homebrew/bin/stanc")
  (setq stan-indentation-offset 2)
  :mode ("\\.stan\\'" . stan-mode)
  :hook (stan-mode . stan-mode-setup))
#+end_src

** Install and Configure stan-snippets
#+srcname: ljs-config-stan-snippets
#+begin_src emacs-lisp 
  (use-package stan-snippets
    :ensure t)
#+end_src

** Install and Configure Flycheck for Stan
#+srcname: ljs-config-flycheck-stan
#+begin_src emacs-lisp 
(use-package flycheck-stan
  ;; Add a hook to setup `flycheck-stan' upon `stan-mode' entry
  :hook ((stan-mode . flycheck-stan-stanc2-setup)
         (stan-mode . flycheck-stan-stanc3-setup))
  :config
  ;; A string containing the name or the path of the stanc2 executable
  ;; If nil, defaults to `stanc2'
  (setq flycheck-stanc-executable "/opt/homebrew/bin/stanc")
  ;; A string containing the name or the path of the stanc2 executable
  ;; If nil, defaults to `stanc3'
  (setq flycheck-stanc3-executable "/opt/homebrew/bin/stanc3"))

#+end_src

** Configure Imenu for Stan
#+srcname: ljs-config-imenu-stan
#+begin_src emacs-lisp 
  (add-hook 'stan-mode-hook
            (lambda ()
              (setq-local imenu-generic-expression '((nil "^\\s-*\\(\\w+\\)\\s-*=" 1)))))
#+end_src

** Configure Key Bindings for Stan Commands
#+srcname: ljs-config-key-bindings-stan
#+begin_src emacs-lisp 
  (add-hook 'stan-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-c") 'stan-compile)))
#+end_src

** Rainbow delimiters in Stan-mode
#+begin_src emacs-lisp
(add-hook 'stan-mode-hook #'rainbow-delimiters-mode)
#+end_src

